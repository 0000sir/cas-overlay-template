import org.apache.ivy.util.url.*
import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.*
import java.util.*

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.apache.ivy:ivy:${project.ivyVersion}"
    }
}

apply plugin: 'de.undercouch.download'
apply plugin: 'com.boazj.log'

def tomcatDirectory = "${buildDir}/apache-tomcat-${tomcatVersion}"

task copyCasConfiguration(type: Copy, group: "build", description: "Copy the CAS configuration from this project to /etc/cas/config") {
    from "etc/cas/config"
    into "/etc/cas/config"
    doFirst {
        mkdir "/etc/cas/config"
    }
}

task copyWebAppIntoJib(type: Copy, group: "Docker", description: "Copy the web application into Docker image") {
    dependsOn build
    from "build/libs/${casWebApplicationBinaryName}"
    into "src/main/jib/docker/cas/war"
}

task copyConfigIntoJib(type: Copy, group: "Docker", description: "Copy the CAS configuration into Docker image") {
    dependsOn build
    from "etc/cas"
    into "src/main/jib/docker/cas"
}

task deleteWebAppFromJib(type: Delete, group: "Docker", description: "Explodes the CAS web application archive") {
    delete "src/main/jib/docker/cas"
}

task explodeWar(type: Copy, group: "build", description: "Explodes the CAS web application archive") {
    dependsOn build
    from zipTree("build/libs/${casWebApplicationBinaryName}")
    into "${buildDir}/cas"
}

task run(group: "build", description: "Run the CAS web application in embedded container mode") {
    dependsOn build
    doLast {
        def casRunArgs = Arrays.asList("-Xmx2048M -XX:+TieredCompilation -XX:TieredStopAtLevel=1".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casRunArgs
            args = ["build/libs/${casWebApplicationBinaryName}"]
            logger.info "Started ${commandLine}"
        }
    }
}

task setExecutable(group: "build", description: "Configure the project to run in executable mode") {
    doFirst {
        project.setProperty("executable", "true")
        logger.info "Configuring the project as executable"
    }
}

task executable(type:Exec, group: "build", description: "Run the CAS web application in standalone executable mode") {
    dependsOn setExecutable, build
    doFirst {
        workingDir "."
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "chmod", "+x", bootWar.archivePath
        }
        logger.info "Running ${bootWar.archivePath}"
        commandLine bootWar.archivePath
    }
}

task debug(group: "build", description: "Debug the CAS web application in embedded mode on port 5005") {
    dependsOn build
    doLast {
        logger.info "Debugging process is started in a suspended state, listening on port 5005."
        def casArgs = Arrays.asList("-Xmx2048M".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casArgs
            debug = true
            args = ["build/libs/${casWebApplicationBinaryName}"]
            logger.info "Started ${commandLine}"
        }
    }
}

task downloadShell (group: "shell", description: "Download CAS shell jar from snapshot or release maven repo") {
    doFirst {
        mkdir "${project.shellDir}"
    }
    doLast {
        def downloadFile
        if (isRunningCasServerSnapshot(casServerVersion)) {
            def snapshotDir = "https://oss.sonatype.org/content/repositories/snapshots/org/apereo/cas/cas-server-support-shell/${casServerVersion}/"
            def files = new ApacheURLLister().listFiles(new URL(snapshotDir))
            files = files.sort{it.path}
            files.each {
                if (it.path.endsWith(".jar")) {
                    downloadFile = it
                }
            }
        } else {
            downloadFile = "https://repo1.maven.org/maven2/org/apereo/cas/cas-server-support-shell/${casServerVersion}/cas-server-support-shell-${casServerVersion}.jar"
        }
        logger.info "Downloading file: ${downloadFile}"
        download {
            src downloadFile
            dest new File("${project.shellDir}", "cas-server-support-shell-${casServerVersion}.jar")
            overwrite false
        }
    }
}

task runShell (group: "shell",  description: "Run the CAS shell") {
    dependsOn downloadShell
    doLast {
        def casShellArgs = Arrays.asList("-Xmx1500M".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casShellArgs
            standardInput = System.in
            args = ["${project.shellDir}/cas-server-support-shell-${casServerVersion}.jar", "--shell"]
        }
    }
}

task debugShell (group: "shell", description: "Run the CAS shell with debug options, wait for debugger on port 5005") {
    dependsOn downloadShell
    doLast {
        def casArgs = Arrays.asList("-Xmx1500M ".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casArgs
            debug = true
            standardInput = System.in
            args = ["${project.shellDir}/cas-server-support-shell-${casServerVersion}.jar", "--shell"]
        }
    }
}

task showConfiguration(group: "build", description: "Show configurations for each dependency, etc") {
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task allDependenciesInsight(group: "build", type: DependencyInsightReportTask, description: "Produce insight information for all dependencies") {}

task allDependencies(group: "build", type: DependencyReportTask, description: "Display a graph of all project dependencies") {}

task casVersion (group: "build", description: "Display the current CAS version") {
    doFirst { println casServerVersion }
}

task createKeystore (type:Exec, group: "build", description: "Create CAS keystore") {
    doFirst {
        mkdir "/etc/cas"
        workingDir "."

        def keystorePath = "/etc/cas/thekeystore"

        def dn = "CN=cas.example.org,OU=Example,OU=Org,C=US"
        if (project.hasProperty("certificateDn")) {
            dn = project.getProperty("certificateDn")
        }
	    def subjectAltName = "dns:example.org,dns:localhost,ip:127.0.0.1"
        if (project.hasProperty("certificateSubAltName")) {
            subjectAltName = project.getProperty("certificateSubAltName")
        }
        logger.info "Generating keystore for CAS with DN ${dn}"
        commandLine "keytool", "-genkeypair", "-alias", "cas",
            "-keyalg", "RSA",
            "-keypass", "changeit", "-storepass", "changeit",
            "-keystore", keystorePath,
            "-dname", dn, "-ext", "SAN=${subjectAltName}"

        logger.info "Exporting keystore..."
        commandLine "keytool", "-exportcert", "-alias", "cas",
            "-storepass", "changeit", "-keystore", keystorePath,
            "-file", "/etc/cas/cas.cer"
    }
}

task listTemplateViews (group: "build", description: "List all CAS views") {
    dependsOn explodeWar

    doFirst {
        def explodedDir="${buildDir}/cas"
        fileTree(explodedDir).matching {
            include "**/*.html"
        }
        .collect { it.name }
        .toSorted()
        .each { println it }
    }
}

task getResource(group: "build", description: "Fetch a CAS resource and move it into the overlay") {
    dependsOn explodeWar

    doFirst {
        def explodedDir="${buildDir}/cas"
        def resourceName = project.getProperty("resourceName")

        def results = fileTree(explodedDir).matching {
            include "**/${resourceName}.*"
        }
        if (results.isEmpty()) {
            println "No resources could be found matching ${resourceName}"
            return
        }
        if (results.size() > 1) {
            println "Multiple resources found matching ${resourceName}: ${results}"
            return
        }

        def fromFile = explodedDir + "/WEB-INF/classes"
        def resourcesDir = "src/main/resources"
        mkdir resourcesDir

        def resourceFile = results[0].canonicalPath
        def toResourceFile = resourceFile.replace(fromFile, resourcesDir)

        def parent = file(toResourceFile).getParent()
        mkdir parent

        Files.copy(Paths.get(resourceFile), Paths.get(toResourceFile), StandardCopyOption.REPLACE_EXISTING)
        println "Copied file to ${toResourceFile}"
    }
}

def isRunningCasServerSnapshot(casServerVersion) {
    return "${casServerVersion}".contains("-SNAPSHOT")
}

task downloadTomcat(type: Download) {
    def tomcatMajorVersion = "${tomcatVersion}".substring(0, "${tomcatVersion}".indexOf("."))
    def downloadFile = "https://www.apache.org/dist/tomcat/tomcat-${tomcatMajorVersion}/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
    logger.info "Downloading file $downloadFile"
    src downloadFile
    dest new File("apache-tomcat.zip")
    overwrite false
}

task unzipTomcat(type: Copy) {
    from zipTree(downloadTomcat.dest)
    into buildDir
    includeEmptyDirs = false
}

task setCatalinaPermissions(type:Exec) {
    doFirst {
        commandLine "chmod", "+x", "${tomcatDirectory}/bin/catalina.sh"
    }
}

task setTomcatStartupPermissions(type:Exec) {
    dependsOn setCatalinaPermissions
    doFirst {
        commandLine "chmod", "+x", "${tomcatDirectory}/bin/startup.sh"
    }
}

task setTomcatShutdownPermissions(type:Exec) {
    dependsOn setCatalinaPermissions
    doFirst {
        commandLine "chmod", "+x", "${tomcatDirectory}/bin/shutdown.sh"
    }
}

task shutdownTomcat(type:Exec) {
    doFirst {
        environment["CATALINA_HOME"] = "${tomcatDirectory}"
        commandLine "${tomcatDirectory}/bin/shutdown.sh", "2>/dev/null"
        ignoreExitValue = true
    }
}


task tomcatDeploy(type:Exec) {
    dependsOn build, downloadTomcat, unzipTomcat,
        setTomcatShutdownPermissions, setTomcatStartupPermissions,
        shutdownTomcat

    doFirst {
        Files.copy(Paths.get(bootWar.archivePath.canonicalPath), 
            Paths.get("${tomcatDirectory}/webapps/${casWebApplicationBinaryName}"), 
            StandardCopyOption.REPLACE_EXISTING)
        mkdir "${tomcatDirectory}/logs"
        environment["CATALINA_HOME"] = "${tomcatDirectory}"
        commandLine "${tomcatDirectory}/bin/startup.sh"
    }
}

tail {
    log = files("${tomcatDirectory}/logs/catalina.out")
    showColors = true
}

build.mustRunAfter(setExecutable)

unzipTomcat.mustRunAfter(downloadTomcat)
setTomcatStartupPermissions.mustRunAfter(unzipTomcat)
setTomcatShutdownPermissions.mustRunAfter(setTomcatStartupPermissions)
shutdownTomcat.mustRunAfter(setTomcatShutdownPermissions)
tomcatDeploy.mustRunAfter(shutdownTomcat).finalizedBy(tail)
